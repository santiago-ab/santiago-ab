{"version":3,"sources":["components/Nav.js","components/PrivChat.js","components/Chat.js","components/Login.js","components/Reg.js","components/Option.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","src","alt","width","onClick","props","logout","Component","PrivChat","state","inputPrivate","privmessages","handleInput","bind","handleSubmit","prevProps","this","nombre","setState","socket","emit","msgs","div","document","getElementById","scrollTop","scrollHeight","on","data","from","e","target","value","name","preventDefault","RegExp","test","mensaje","minombre","msg","privmsg","map","i","style","borderRadius","backgroundColor","fontWeight","height","salir","class","id","overflowY","onSubmit","type","onChange","required","Chat","handleExitPrivChat","privChat","notifications","inputGlobal","messages","users","usuarios","x","forEach","element","push","notif","user","parseInt","toastr","options","positionClass","hideDuration","timeOut","clear","setTimeout","success","allmsg","handlePrivChat","placeholder","Login","username","password","alert","handleChange","fetch","JSON","stringify","then","response","json","ok","isValid","error","change","Reg","email","registrado","App","reg","login","handlelogout","changeName","handlechangeOption","handleRegistrado","io","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd8d04f2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Nav extends Component {\n\n    render(){\n        return(\n            <nav className=\"navbar navbar-light bg-dark p-0\">\n                \n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item active\">\n                        <img src=\"/logo.png\" className=\"\" alt=\"logo\" width=\"80px\"/>\n                    </li>\n                </ul>\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item active\">\n                        <button className=\"btn btn-sm text-light\" onClick={() => {this.props.logout()}}>Logout</button>\n                    </li>\n                </ul>\n            </nav>\n        )\n    }\n}\n\nexport default Nav;","import React, {Component} from \"react\";\n\nclass PrivChat extends Component {\n    constructor(){\n        super();\n        this.state = {\n            inputPrivate: \"\",\n            privmessages: [],\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.nombre !== prevProps.nombre){\n            this.setState({\n                privmessages: []\n            })\n            this.props.socket.emit(\"load private chat\", this.props.nombre, msgs => {\n                this.setState({\n                    privmessages: msgs\n                })\n            });\n            let div = document.getElementById(\"PrivChat\");\n            div.scrollTop = div.scrollHeight;\n        }\n    }\n    \n    componentWillMount(){\n        this.props.socket.emit(\"load private chat\", this.props.nombre, msgs => {\n            this.setState({\n                privmessages: msgs\n            })\n        });\n        this.props.socket.on(\"new priv message\", data => { \n            if(data.from === this.props.nombre){\n                this.setState({\n                    privmessages: [...this.state.privmessages,data]\n                })\n            }\n        });\n    }\n\n    handleInput(e){\n        const {value,name} = e.target\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        var patt = new RegExp(/^[<>]+$/g);\n        var res = patt.test(this.state.inputPrivate);\n        if(!res){\n            this.props.socket.emit(\"send priv message\", this.props.nombre, this.state.inputPrivate);\n            let mensaje = {from: this.props.minombre, msg: this.state.inputPrivate};\n            this.setState({privmessages: [...this.state.privmessages,mensaje]});\n            this.setState({inputPrivate: \"\"});\n            let div = document.getElementById(\"PrivChat\");\n            div.scrollTop = div.scrollHeight;\n        }else{\n            this.setState({inputPrivate: \"\"});\n        }\n    }\n\n    render(){\n\n        const privmsg = this.state.privmessages.map((privmessages, i) => {\n            if(privmessages.from === this.props.minombre){\n                return (<div className=\"col-7 ml-auto text-right px-0 py-2\"><span className=\"p-2\" style={{borderRadius: \"10px\", backgroundColor: \"#b5ffb9\"}}><span style={{fontWeight: \"bold\"}}>{privmessages.from}: </span>{privmessages.msg}</span></div>)\n            }else{\n                return (<div className=\"col-7 mr-auto px-0 py-2\"><span className=\"p-2\" style={{borderRadius: \"10px\", backgroundColor: \"#b5c6ff\"}}><span style={{fontWeight: \"bold\"}}>{privmessages.from}: </span>{privmessages.msg}</span></div>)\n            }\n        });\n\n        return (\n            <div className=\"card\" style={{height: \"50hv\"}}>\n                <div className=\"card-header p-2\">\n                    <div className=\"row\">\n                        <div className=\"col-10\">\n                            <i className=\"fas fa-user pr-1\"></i>{this.props.nombre}\n                        </div>\n                        <div className=\"col-2 text-right\">\n                            <button className=\"btn p-0 m-0\" onClick={this.props.salir}><i class=\"fas fa-window-close\"></i></button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card-body py-0\" id=\"PrivChat\" style={{height: \"500px\", overflowY: \"auto\"}}>\n                    {privmsg}\n                </div>\n                <form name=\"privateMessage\" className=\"card-footer\" onSubmit={this.handleSubmit}>\n                    <div className=\"input-group\">\n                        <input type=\"text\" name=\"inputPrivate\" value={this.state.inputPrivate} onChange={this.handleInput} className=\"form-control\" required/>\n                        <div className=\"input-group-append\">\n                            <input type=\"submit\" className=\"btn btn-success\" value=\"Enviar\"/>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default PrivChat;","import React, {Component} from \"react\";\nimport PrivChat from \"./PrivChat\";\nimport toastr from \"toastr\";\nimport 'toastr/build/toastr.min.css'\n\nclass Chat extends Component {\n    constructor(){\n        super();\n        this.state = {\n            inputGlobal: \"\",\n            privChat: \"\",\n            messages: [],\n            users: [],\n            notifications: ''\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillMount(){\n        \n        this.props.socket.emit(\"load chat\", msgs => {\n            this.setState({\n                messages: msgs\n            })\n        });\n        \n        this.props.socket.on(\"usernames\", usuarios => {\n            let x = [];\n            usuarios.forEach(element => {\n                x.push({name: element,notif:0});\n            });\n\n            this.setState({\n                users: x,\n            })\n        });\n\n        this.props.socket.on(\"new message\", data => { \n            this.setState({\n                messages: [...this.state.messages,data]\n            })\n            let div = document.getElementById(\"GlobalChat\");\n            div.scrollTop = div.scrollHeight;\n        });\n\n        this.props.socket.on(\"new priv message\", data => { \n            if(data.from !== this.state.privChat){\n                const x = this.state.users.map((user, i) => {\n                    if(user.name === data.from){\n                        return ({name: user.name, notif: parseInt(user.notif)+1})\n                    }else{\n                        return ({name: user.name, notif: user.notif})\n                    }\n                });\n                this.setState({users: x})\n            }else{\n                toastr.options = {\n                    positionClass : 'toast-top-full-width',\n                    hideDuration: 300,\n                    timeOut: 60000\n                }\n                toastr.clear()\n                setTimeout(() => toastr.success(\"New private message from: '\"+data.from+\"'\"), 300)\n            }\n        });\n        \n    }\n        \n    handleInput(e){\n        const {value,name} = e.target\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        this.props.socket.emit(\"send message\", this.state.inputGlobal);\n        this.setState({inputGlobal:\"\"});\n        let div = document.getElementById(\"GlobalChat\");\n        div.scrollTop = div.scrollHeight;\n    }  \n\n    handlePrivChat(user){\n        if(this.props.minombre !== user){\n            const x = this.state.users.map((value, i) => {\n                if(value.name === user){\n                    return ({name: value.name, notif: 0})\n                }else{\n                    return ({name: value.name, notif: value.notif})\n                }\n            });\n            this.setState({users: x/*, notifications: \"\"*/})\n            this.setState({privChat: user});\n        }\n    }\n\n    handleExitPrivChat = () => {\n        this.setState({privChat: \"\", notifications: \"\"})\n    }\n\n    render(){\n        const allmsg = this.state.messages.map((messages, i) => {\n            if(messages.user === this.props.minombre){\n                return(<div className=\"col-7 ml-auto text-right px-0 py-2\"><span className=\"p-2\" style={{borderRadius: \"10px\", backgroundColor: \"#b5ffb9\"}}><span style={{fontWeight: \"bold\"}}>{messages.user}: </span>{messages.msg}</span></div>)\n            }\n            else{\n                return(<div className=\"col-7 mr-auto px-0 py-2\"><span className=\"p-2\" style={{borderRadius: \"10px\", backgroundColor: \"#b5c6ff\"}}><span style={{fontWeight: \"bold\"}}>{messages.user}: </span>{messages.msg}</span></div>)\n            }\n        });\n        const users = this.state.users.map((user, i) => {\n            return (\n                <button class=\"btn d-block\" onClick={()=>{this.handlePrivChat(user.name)}}><i class=\"fas fa-user pr-1\"></i>{user.name}{user.notif ? <span class=\"badge badge-danger ml-1\">{user.notif}</span> : \"\"}</button>\n            )\n        });\n\n        return (\n            <div className=\"row\">\n                {/* <div style={{position: \"absolute\", right: 0, zIndex:1 }}>{this.state.notifications ? <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">New message from: {this.state.notifications}<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button></div>: \"\"}</div> */}\n                <div className=\"col-10\">\n                    <div className=\"row mt-1\">\n                        <div className=\"col-7\">\n                            <div className=\"card\">\n                                <div className=\"card-header p-2\">\n                                    Chat\n                                </div>\n                                <div className=\"card-body py-0\" id=\"GlobalChat\" style={{height: \"500px\", overflowY: \"auto\"}}>\n                                    {allmsg}\n                                </div>\n                                <form name=\"globalMessage\" className=\"card-footer\" onSubmit={this.handleSubmit}>\n                                    <div className=\"input-group\">\n                                        <input type=\"text\" name=\"inputGlobal\" value={this.state.inputGlobal} onChange={this.handleInput} className=\"form-control\" placeholder=\"Mensaje\" required/>\n                                        <div className=\"input-group-append\">\n                                            <input type=\"submit\" className=\"btn btn-success\" value=\"Enviar\"/>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                        <div className=\"col-5\">\n                            {this.state.privChat ? <PrivChat salir={this.handleExitPrivChat} nombre={this.state.privChat} minombre={this.props.minombre} socket={this.props.socket}/> : \"\"}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-2 mt-1\">\n                    <div className=\"card\">\n                        <div className=\"card-header p-2\">\n                            Online Users\n                        </div>\n                        <div className=\"card-body\" style={{height: \"550px\", overflowY: \"scroll\"}}>\n                            {users}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chat;","import React, {Component} from 'react';\n\nclass Login extends Component {\n    state = {\n        username:'',\n        password:'',\n        alert:''\n    }\n\n    handleChange = ({target}) => {\n        const name = target.name\n        const value = target.value\n        this.setState({\n            [name]: value\n        })\n    }\n  \n    handleSubmit = (e) => {\n        e.preventDefault();\n        var patt = new RegExp(/^[<>]+$/g);\n        var res = patt.test(this.state.username);\n        if(!res){\n            fetch(\"/login?data=\"+JSON.stringify(this.state))\n            .then(response => response.json())\n            .then(data => {\n                if(!data.ok){\n                    this.setState({alert: data.error})\n                }else{\n                    this.props.socket.emit(\"new user\", this.state.username, isValid => {\n                        if(isValid === 0){\n                            this.props.minombre(this.state.username);\n                        }\n                        if(isValid === 1){\n                            this.setState({alert: \"Nickname already Exists\"});\n                        }\n                        if(isValid === 2){\n                            this.setState({alert: \"You are already chating\"});\n                        }\n                    });\n                }\n            });\n        }else{\n            this.setState({alert: \"Caracteres invalidos\"});\n        }\n    }\n\n    render (){\n        return (\n            <div className=\"container\" id=\"loginWindows\">\n                <div className=\"row mt-4\">\n                <div className=\"col-4 mx-auto\">\n                        <div className=\"card\">\n                            <div className=\"card-header text-center\">\n                                <div id=\"alerta\">{this.state.alert ? <div class=\"alert alert-danger\">{this.state.alert}</div> : \"\"}</div>\n                            </div>\n                            <div className=\"card-body\" id=\"chat\">\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className=\"input-group mb-2\">\n                                        Username:\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\" onChange={this.handleChange}/>\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        Password:\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" onChange={this.handleChange}/>\n                                    </div>\n                                    <div className=\"input-group\">\n                                        <input type=\"submit\" className=\"btn btn-primary mx-auto\" value=\"Login\" />\n                                    </div>\n                                </form>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button class=\"btn btn-sm btn-success mx-auto\" onClick={this.props.change}>Or Register</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n  \nexport default Login;\n\n\n\n\n\n\n\n\n\n\n","import React, {Component} from 'react';\n\nclass Reg extends Component {\n    state = {\n        username:'',\n        email:'',\n        password:'',\n        alert:''\n    }\n\n    handleChange = ({target}) => {\n        const name = target.name\n        const value = target.value\n        this.setState({\n            [name]: value\n        })\n    }\n  \n    handleSubmit = (e) => {\n        e.preventDefault();\n        fetch(\"/signup?data=\"+JSON.stringify(this.state))\n        .then(response => response.json())\n        .then(data => {\n            if(!data.ok){\n                this.setState({alert: data.error})\n            }else{\n                this.props.registrado();\n            }\n        });\n    }\n\n    render (){\n        return (\n            <div className=\"container\" id=\"loginWindows\">\n                <div className=\"row mt-4\">\n                    <div className=\"col-4 mx-auto\">\n                        <div className=\"card\">\n                            <div className=\"card-header text-center\">\n                                <div id=\"alerta\">{this.state.alert ? <div class=\"alert alert-danger\">{this.state.alert}</div> : \"\"}</div>\n                            </div>\n                            <div className=\"card-body\" id=\"chat\">\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className=\"input-group mb-2\">\n                                        Username:\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\" onChange={this.handleChange}/>\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        Email:\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control\" onChange={this.handleChange}/>\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        Password:\n                                    </div>\n                                    <div className=\"input-group mb-2\">\n                                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" onChange={this.handleChange}/>\n                                    </div>\n                                    <div className=\"input-group\">\n                                        <input type=\"submit\" className=\"btn btn-success mx-auto\" value=\"Register\" />\n                                    </div>\n                                </form>\n                            </div>\n                            <div className=\"card-footer\">\n                                <button class=\"btn btn-sm btn-primary mx-auto\" onClick={this.props.change}>Or Login</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n  \nexport default Reg;","import React, {Component} from 'react';\n\nclass Option extends Component {\n\n    render (){\n        return (\n            <div className=\"container\" id=\"loginWindows\">\n                <div className=\"row mt-4\">\n                    <div className=\"col-4 mx-auto\">\n                        <div className=\"card\">\n                            <div className=\"card-body\" id=\"chat\">\n                                <div className=\"input-group\">\n                                    <button className=\"btn btn-primary mx-auto\" onClick={this.props.reg}>Register</button>\n                                    <button className=\"btn btn-success mx-auto\" onClick={this.props.login}>Login</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n  \nexport default Option;\n\n\n\n\n\n\n\n\n\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport Chat from \"./components/Chat\";\nimport Login from \"./components/Login\";\nimport Option from \"./components/Option\";\nimport Reg from \"./components/Reg\";\nimport io from \"socket.io-client\";\n\n\nclass App extends Component {\n  \n  state = {\n    minombre: '',\n    reg: '',\n    login: '1'\n  }\n\n  componentWillMount(){\n    this.socket = io(\"/\");\n    fetch(\"/logged\")\n    .then(response => response.json())\n    .then(data => {\n      if(data.name!==\"\"){\n        this.socket.emit(\"new user\", data.name, isValid =>{});\n        this.setState({minombre: data.name, login: '', reg: ''});\n      }\n    });\n  }\n\n  handlelogout = () =>{\n    fetch(\"/logout\")\n    .then(response => response.json())\n    .then(data => {\n      if(data.ok){\n        this.socket.emit(\"logout\", data.name);\n        this.setState({minombre: \"\", login:'1'});\n      }\n    });\n  }\n\n  changeName = (data) => {\n    this.setState({minombre: data, login: \"\"})\n  }\n\n  handlechangeOption = () => {\n    if(this.state.login){\n      this.setState({\n        login: '',\n        reg: '1'\n      })\n    }else{\n      this.setState({\n        login: '1',\n        reg: ''\n      })\n    }\n  }\n\n  handleRegistrado = () => {\n    this.setState({reg: \"\", login: \"1\"});\n  }\n\n  render (){\n    \n    return (\n      <div>\n        <Nav logout={this.handlelogout}/>\n        <div className=\"container-fluid\">\n          {this.state.login ? <Login change={this.handlechangeOption} socket={this.socket} minombre={this.changeName}/> : null}\n          {this.state.reg ? <Reg change={this.handlechangeOption} registrado={this.handleRegistrado}/> : null}\n          {this.state.minombre ? <Chat minombre={this.state.minombre} socket={this.socket} /> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}